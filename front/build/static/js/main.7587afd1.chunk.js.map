{"version":3,"sources":["queries/fetch_users.ts","App.tsx","index.tsx"],"names":["FETCH_USERS","gql","App","useQuery","loading","data","error","className","users","map","user","firstname","lastname","user_id","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","document","getElementById"],"mappings":"0OAIaA,EAAcC,cAAH,yG,QC+BTC,MA/Bf,WAAgB,IAAD,EAEoBC,mBAASH,GAAlCI,EAFK,EAELA,QAAgBC,GAFX,EAEIC,MAFJ,EAEWD,MAaxB,OACE,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,+CAbAH,EACK,6CAEAC,EAAKG,MAAMC,KAAI,SAACC,GACrB,OAAO,+BAAwBA,EAAKC,UAA7B,IAAyCD,EAAKE,WAArCF,EAAKG,kBCNvBC,EAA8C,IAAIC,eAAa,CACnEC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CAAEC,IAJV,qCAObC,IAASC,OACP,cAAC,iBAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.7587afd1.chunk.js","sourcesContent":["\n\nimport { gql } from '@apollo/client'\n\nexport const FETCH_USERS = gql`\n{\n  users{\n    user_id\n    firstname\n    lastname\n    is_admin\n  }\n}\n`","import './App.css';\nimport {  useQuery } from '@apollo/client'\nimport { FETCH_USERS } from './queries/fetch_users'\n\nfunction App() {\n\n  const { loading, error, data } = useQuery(FETCH_USERS)\n\n\n  const mapUsers = () => {\n    if (loading) {\n      return <div>Loading...</div>\n    } else {\n      return data.users.map((user: any) => {\n        return <li key={user.user_id}>{user.firstname} {user.lastname}</li>\n      })\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <p>\n          Hello world !!\n        </p>\n        \n      {mapUsers()}\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {ApolloClient, InMemoryCache, NormalizedCacheObject, ApolloProvider, HttpLink} from '@apollo/client'\n\nconst link = \"http://localhost:4000/graphql/\"\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ uri: link})\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}